"""nsmlZeroToAll
##############

These are some short examples to get you up to speed with the different nsml
features. Each code block contains one python file, that can be run with nsml.

"""

####################
# Running code with nsml
# ==========================
#
# This example introduces the nsml interactive mode, which directly prints the
# output generated by the user provided code to his console.

import os

# Run nsml with -i (interactive option)
# $ nsml run  01-hello_nsml.py -i
print('hello NSML!')

####################
# Using tensorflow with nsml
# =============================
#
# This example shows how easy it is to use tensorflow with nsml.

import tensorflow as tf

# Run nsml with -i (interactive option)
# $ nsml run  02-hello_tf.py -i
print(tf.__version__)

####################
# Using pytorch with nsml
# =============================
#
# This example shows how easy it is to use pytorch with nsml.

import torch

# Run nsml with -i (interactive option)
# $ nsml run  01-hello_pytorch.py -i
print(torch.__version__)

####################
# Using keras with nsml
# =============================
#
# This example shows how easy it is to use keras with nsml.

import keras

# Run nsml with -i (interactive option)
# $ nsml run  01-hello_keras.py -i
print(keras.__version__)

####################
# Logging with nsml
# =====================
#
# This example shows how easy it is to log arbitrary values during program
# execution. These logs can be visualized automatically and are stored for later
# reference.

import nsml
import time
from random import randint

# nsml plot -f [NAME]
for epoch in range(2000):
    time.sleep(1)
    nsml.report(
        epoch=epoch, train__acc=randint(0, 9), train__loss=randint(0, 9))

####################
# Environment variables and nsml
# ==================================
#
# Environment variables are an integral concept of nsml. With them e.g.
# information about dataset locations are made accessible to the code. This
# example shows how to access environment variables.

import os

# Run nsml with -i (interactive option)
# $ nsml run  06-nsml_envs.py -i

# Print nsml env variables
for key in os.environ.keys():
    print(key, os.environ[key])

####################
# Accessing datasets with nsml
# ==================================
#
# Machine learning relies on data. This example shows how to upload datasets to
# the nsml cloud as well as how to access them later for training.

import os
import numpy as np

# 1. Push data
#   $ nsml dataset push diabetes data/
# 2. Run this
#   $ nsml run  07-data_read.py -i -d diabetes
if 'NSML_DATASET_PATH' in os.environ:  # Check if the path is set
    DATASET_PATH = os.environ['NSML_DATASET_PATH']
    DATASET_NAME = os.environ['NSML_DATASET_NAME']

    print(DATASET_NAME, "in", DATASET_PATH)
    xy = np.loadtxt(
        os.path.join(DATASET_PATH, 'diabetes.csv'),
        delimiter=',',
        dtype=np.float32)
    print(xy)
else:
    print('DATASET_PATH is not set')

####################
# Writing results to persistent storage
# ========================================
#
# This example shows you how to store (as well as access later) files created
# during your program execution.

import os
import numpy as np

# 1. run nsml
#   $ nsml run ...
# 2. download the session
#   $ nsml download <session_id>

with open('nsml_file_save.txt', 'w') as file:
    file.write('Stored after session')

####################
# Inference with nsml
# =======================
#
# This example shows how to do model inference with nsml.

import os
import numpy as np
import nsml

from random import randint


def bind_model(model, **kwargs):
    def save(filename, *args):
        # save the model with 'checkpoint' dictionary.
        print("save your model in the file")

    def load(filename, *args):
        # load the model from the file
        print("load your model from the file")

    def infer(input):
        print("input:", input)
        # infer using the loaded model
        # ...
        # return the results
        return randint(0, 9)

    def evaluate():
        pass

    def decode(input):
        print("decode:", input)

    # function in function is just used to divide the namespace.
    nsml.bind(save, load, infer, evaluate, decode)


# Need to remember some state
nsml.save(10)

####################
# nsml leaderboard
# =======================
#
# nsml provides a handy leaderboard functionality. This example shows how to use
# it.

import os
import numpy as np

# 1. Push data
#   $ nsml dataset push diabetes data/
# 2. Run this
#   $ nsml run  07-data_read.py -i -d diabetes
if 'NSML_DATASET_PATH' in os.environ:  # Check if the path is set
    DATASET_PATH = os.environ['NSML_DATASET_PATH']
    DATASET_NAME = os.environ['NSML_DATASET_NAME']

    print(DATASET_NAME, "in", DATASET_PATH)
    xy = np.loadtxt(
        os.path.join(DATASET_PATH, 'diabetes.csv'),
        delimiter=',',
        dtype=np.float32)
    print(xy)
else:
    print('DATASET_PATH is not set')
